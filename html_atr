Написание текста: 
	<p> - позволяет написать текст. (можно и без него, но тогда текст не получится разбить на части.)
	Заголовки:
	<h1>..<h6> - создаёт заголовок. (цифра отвечает за его размер. чем больше цифра, тем меньше текст.)

Стиль начертания текста:
	<b> или <strong> - выделяет текст, делая его жирным
	<i> или <em> - выделяет текст, отображая его курсивом
		Важно!  <i> - визуальное выделение
				<em> - логический акцент

Списки:
	<ul> - начало списка
	<li> - маркированный список
	<ol> - нумерованный список

	Вложенные списки делаются так:
	<ul>
  		<li>Сходить в магазин
    			<ul>
      			<li>Купить молоко</li>
      			<li>Купить хлеб</li>
    			</ul>
  		</li>
 		<li>Пройти уроки на Code Basics </li>
	</ul>
	
		Разметка списка с нумерацией с вложенным списком с выткнутой точкой

	<ol>
  		<li>Профессия JavaScript
    			<ul>
      			<li>Frontend</li>
      			<li>Backend</li>
    			</ul>
		</li>
  		<li>Профессия PHP</li>
	</ol>

			Важно отметить, что вложенный список является частью пункта списка и находится внутри тега <li>
		Атрибут 'start' позволяет определять с какого числа начнётся список
		Атрибут 'reversed' позволяет перевернуть список "вверх ногами"

Таблицы:
	<table> — область таблицы
	<tr> — строка
	<thead> — шапка таблицы
	<th> — ячейка шапки
	<tbody> — тело таблицы
	<td> — ячейка

	Создавать таблицу нужно вот так:
			<table>
  				<tr>
    					<td>Шоколад «Тота»</td>
    					<td>100 грамм</td>
    					<td>200 рублей</td>
 				</tr>
			</table>
	Чтобы создать таблицу с двумя колонками вниз, нужно добавить ещё один атрибут <tr>

	Заголовок таблицы задаётся следующим образом:
		<thead>
			<tr>
				<th>Название ячейки</th>   (название ячеек слева направо)
			</tr>
		</thead>

	Размечение "головы" и "тела" таблицы
		<thead> - размечает "голову" таблицы
		<tbody> - размечает "тело" таблицы.

		С помощью <caption> можно добавить описание таблицы

	Для того чтобы объединить ячейки (горизонтально), нужно сделать два действия:
		1. В тег ячейки, которую будем объединять, добавить атрибут <colspan> со значением, равным количеству объединяемых ячеек справа
		2. Удалить лишние ячейки из строки

		Пример: <td colspan="2">Нет на складе</td>
	Для того чтобы объединить ячейки (вертикально), нужно сделать два действия:
		1. В тег ячейки, которую будем объединять, добавить атрибут <rowspan> со значением, равным количеству объединяемых ячеек снизу
		2. Алгоритм действий, как при объединении по горизонтали, только ячейки удаляются в соседних строках.

Символы (ξ π ϒ):
	Для записи символов используется конструкция &название-символа; Важно соблюдать регистр букв в названии символа.
	 	Для примера можно взять масти карт:

			♣	&clubs;
			♠	&spades;
			♥	&hearts;
			♦	&diams;

		Основными типографическими мнемониками в HTML являются:

			&nbsp; — неразрывный пробел. Очень важная вещь, которая позволяет не переносить строку с пробелом там, где это может испортить логическую структуру текста
			&laquo; и &raquo; — традиционные «кавычки-ёлочки». Повсеместно используются в типографике
			&mdash; — длинное тире

Ссылки:
	Гиперссылки могут ссылаться не только на другой ресурс в интернете, но и позволяют перемещаться внутри текущего документа.

	Ссылки можно поделить на 3 типа:

		Относительные. Такие ссылки ссылаются на тот же сайт, с которого и происходит переход

				<!-- Ссылка указывает на документ внутри текущего сайта -->
				<a href="/languages/html">Вернуться на выбор уроков</a>

		Абсолютные. Позволяют переходить на сторонние ресурсы в интернете

				<!-- Ссылка указывает на документ стороннего сайта.
     			В данном случае на главную страницу Code Basics -->
				<a href="https://code-basics.com/">Перейти на сайт Code Basics</a>

		Ссылки-якоря. Используются для перемещения внутри текущего документа

				<a href="#anchor">Переход на главу 2</a>
				...
				...
				...
				<div id="anchor">
				    <h2>Глава 2</h2>
				</div>

Форматирование текста:
	тег <pre> позволяет вывести текст внутри себя с сохранением всех пробельных символов.

	По умолчанию тег <pre> выводит текст моноширинным шрифтом, в котором все символы имеют одинаковую ширину, в отличие от обычных шрифтов.

	Внутри тега pre можно использовать теги для оформления текста: <i>, <em>, <b>, <strong>.

			Пример: 
			<pre>
			Вы ушли,
			        как говорится,
			                      в мир в иной.
			Пустота...
			        Летите,
			              в звезды врезываясь.
			Ни тебе аванса,
			              ни пивной.
			Трезвость.
			</pre>

Вставка компьютерного кода:
	Для создания блока с кодом используется тег <code>, внутри которого записывается код на любом языке программирования.
	Тег <code> часто используют вместе с тегом <pre>, что позволяет сохранить форматирование.

	Пример: <code>
			  <pre>
			    a = int(input())
			    if a == 2:
			      print("ok")
			  </pre>
			</code>

Вставка изображений:
	Для вставки картинки на страницу используется непарный тег <img>, который имеет два обязательных атрибута: <src>, <alt>
	<src> - атрибут, в котором указывается путь к изображению
	<alt> - атрибут, в котором показывается текст-описание картинки, если она вдруг стала недоступна.
	Пример: <img src="/images.png">
	Пример с alt: <img src="https://example.com/images.png" alt="Аналитика компании за 2007 год">
		Также можно менять размер изображения: <img src="https://example.com/images.png" alt="Аналитика компании за 2007 год" width="320" height="240">
		Размер изображения меняется визуально, картинка остаётся с тем же качеством и весом. (height - высота, width - ширина. в пикселях)

Вставка аудио:
	<audio src="путь_к_аудио-файлу" controls></audio>

	Не все браузеры поддерживают одни и те же форматы аудио. Специально для этого существует вложенный тег source, в котором указываются пути на другие форматы аудио файлов. В таком случае браузер выберет тот, который поддерживается в настоящий момент. При такой разметке указывать src у тега <audio> необязательно.

	Пример: <audio controls>
			  <source src="https://example.com/audio.mp3">
			  <source src="https://example.com/audio.ogg">
			</audio>
	
Вставка видео:
	парный тег <video> позволяет вставлять видео с помощью "src".
		Пример: <video src="https://example.com/our-video.mp4" controls></video>
	
	с помощью <source src> можно вставить несколько форматов видео (mp4, webm, ogg), после ссылки нужно прописать тип файла. (type="video/формат")
			
			Тег <video> имеет несколько важных атрибутов:
					controls — Добавляет элементы управления для видеоплеера
					autoplay — Автоматическое воспроизведение после загрузки видео
					width — Ширина видеоплеера   \    в
					height — Высота видеоплеера	  \     пикселях

Базовая структура html:
	Блок head, содержащий метаинформацию о нашем сайте. Данные из этого блока не отображаются непосредственно на странице, а служат для её описания, подключения стилей и скриптов.
	Блок body является основным местом, где строится HTML-разметка. Данные в этом блоке будут обработаны и выведены в браузер.

	Пример: <!DOCTYPE html>
			<html lang="ru">
			<head>
			  <meta charset="UTF-8">
			  <title>Базовая разметка HTML</title>
			</head>
			<body>
			  <h1>Code Basics</h1>
			  <p>Бесплатные уроки по программированию и HTML для новичков</p>
			</body>
			</html>

Метатеги (указываются в "голове" сайта "<head>"):
	title - указывает название сайта
	meta - позволяет добавить метаинформацию
		name - указывает на то, какой тип метаинформации описывается в теге
		content - указывает саму информацию
		 Пример: <meta name="description" content="Бесплатные практические уроки по программированию для тех, кто начинает с нуля.">

		Ключевые слова (атрибут keywords):
			пример: <meta name="keywords" content="программирование, курсы, HTML, CSS">
		Кодировка страницы (атрибут charset):
			пример: <meta charset="UTF-8">

Тег <link>:
		Иконка сайта (фавикон) 
			Для того, чтобы установить такую иконку на страницу, используется тег <link>, у которого указываются два атрибута:
				rel - для указания контента
				href - для указания ссылки на иконку

					пример: <link rel="icon" href="/favicon.png">

			Нужно учитывать, что устройства отображают иконки по-разному.

				<link rel="icon" href="/favicon64.png" type="image/png" sizes="64x64">
				<link rel="icon" href="/favicon32.png" type="image/png" sizes="32x32">
				<link rel="icon" href="/favicon16.png" type="image/png" sizes="16x16">
		
		Тег <link> позволяет добавлять не только фавиконку, но и подключать файлы стилей, шрифты, подсказывать браузерам следующую (или предыдущую) страницу статьи. Самый распространённый пример — подключение файла CSS к HTML-странице:

				Пример: <link rel="stylesheet" href="style.css">

Viewport:
	Для корректного отображения разметки HTML браузеры создают специальную копию разметки и вставляют её в «виртуальное окно», которое называется viewport.
	До этого тега сайты на мобильных устройствах отображались неправильно.
	Наиболее часто используют значение device-width у параметра width, которое устанавливает ширину страницы, равную ширине экрана устройства.
	Пример: 
			<head>	
			  <meta name="viewport" content="width=device-width">
			</head>

	Этим значением браузеру сообщается, что ширина страницы равна ширине устройства, с которого эта страница просматривается.

	Основные параметры метатега viewport
		width — ширина сайта. Указывается в пикселях. Возможно использование значения device-width для установки ширины страницы равной ширине устройства.
		height — высота сайта. Указывается в пикселях. Возможно использование значения device-height для установки высоты страницы равной высоте устройства.
		initial-scale — начальный коэффициент масштабирования. Может принимать значение от 0.1 до 10.0. Значение единица масштабирует страницу по умолчанию.
		user-scalable — указывает, может ли пользователь масштабировать страницу, то есть приближать или отдалять её. Принимает значение yes и no

		Базовое использование метатега viewport:
			<meta name="viewport" content="width=device-width, initial-scale=1.0">

Тег <span>:
	занимает ширину, равную ширине своего контента, поэтому переноса строки нет
	Пример:

	<span>что-то очень умное</span>
	<span>ещё что-то очень умное</span>
	<span>что-то очень умное</span>
	<span>ещё что-то очень умное</span>
	<span>что-то очень умное</span>
	<span>ещё что-то очень умное</span>
	<span>что-то очень умное</span>
	<span>ещё что-то очень умное</span>

	Вывод: что-то очень умное ещё что-то очень умное что-то очень умное ещё что-то очень умное что-то очень умное ещё что-то очень умное что-то очень умное ещё что-то очень умное

	Полезное:

	Строчные элементы часто используют для стилизации. Например, тег <span> используют для оборачивания участка текста. Потом этот участок стилизуют с помощью CSS
	В большинстве случаев строчные элементы можно помещать внутрь блочных, а блочные нельзя помещать внутрь строчных. Исключение — ссылки. Внутрь ссылки можно помещать блочные элементы. Такое использование разрешили в стандарте HTML5

Формы:
	При взаимодействии с HTML-документами одно из частых действий — ввод данных в различные поля документа. Например, ввод данных в строку поиска. Именно так вы ищете информацию с помощью поисковых систем
	(например, Google или Yandex): вводите запрос, он отправляется на сервер (компьютер, на котором расположен сайт), и на выходе вы получаете результат поиска.
	взаимодействие осуществляется с помощью форм — набора полей и кнопок действий. Важно помнить, что HTML не умеет обрабатывать данные, которые были отправлены через форму.
	Для взаимодействия с этими данными нужно использовать языки программирования, которые работают на сервере, например JavaScript или PHP
	Любая форма начинается с главного тега <form>, внутри которого и будут располагаться поля для заполнения и кнопка действия.

	Пример: <form>
			  // Внутри формы будут поля для ввода данных и кнопка с действием (отправкой данных)
			</form>
	
	Основным атрибутом у тега <form> является action — путь к файлу, где располагается обработчик данных. Именно туда уйдут данные после отправки формы.

	Пример:
		<form action="/search">
		  // Данные, после заполнения, будут отправлены на страницу /search
		</form>
	
	Основной элемент форм в HTML — поле для ввода. реализуется с помощью тега <input>
	Базовыми типами инпутов являются:
		Текст
		Пароли
		Чекбоксы
		Радио кнопки

		Пример:
			<form>
		  		<input type="text">
			</form>

		тег <label>. Это парный тег, который напоминает параграф, но относится именно к описанию поля формы.

			<form>
			  <label>Введите имя</label>
			  <input type="text">
			</form>

		нужно, чтобы указать назначение поля

		Для связи label используется один из двух вариантов:

			Связь по атрибуту id. Для этого у тега <input> указывается атрибут id с произвольным именем, а у <label> добавляется атрибут for с таким же именем, как и значение id у элемента input
			<form>
			  <label for="name">Введите имя</label>
			  <input type="text" id="name">
			</form>

			Связь через вложенность. Вы обратили внимание, что <label> — это парный тег? Для связи можно вложить input внутрь label, тогда они автоматически свяжутся друг с другом
				<form>
				  <label>Введите имя
				    <input type="text">
				  </label>
				</form>

			атрибут placeholder:
				Чтобы помочь пользователю используется атрибут placeholder у тега <input>. Значение этого атрибута будет выведено внутри текстового поля.

					<form>
					  <label for="name">Введите имя и фамилию</label>
					  <input type="text" id="name" placeholder="Иван Иванов">
					</form>

				Замечали, что при вводе паролей, браузер автоматически проставляет звёздочки вместо показа символов? Этого можно добиться указав значение password для атрибута type:

					<form>
					  <label for="pin">Введите пинкод</label>
					  <input type="password" id="pin" placeholder="1234">
					</form>

				В стандарте HTML5 появилось ещё несколько интересных типов для тега <input>, которые реализуют обычное текстовое поле, но имеют свою реализацию. Например:

					email
					number
					search
					tel
					url
				
				Их назначение в том, что значения автоматически проверяются браузером на корректность.

			Checkbox:
				Для создания чекбокса используются два тега:

					<input> с указанием type="checkbox"
					<label>, в котором будет текст, связанный с нужным нам чекбоксом

				Для создания связи <label> с <input> существует два способа:

					Связь по id. Для этого необходимо задать уникальный id для <input> и связать <label> с чекбоксом с помощью атрибута for
					
						<form>
						  <input id="html" type="checkbox">
						  <label for="html">Хочу изучать HTML</label>
						</form>

					Вложить <input> внутрь тега <label>. При этом указание уникального id не требуется
						
						<form>
						  <label>
						    <input type="checkbox">
						    Хочу изучать HTML
						  </label>
						</form>

				атрибут "value" используется для того, чтобы определить какой именно чекбокс был выбран. это нужно для отправки на сервер-сайд клиент.
					с ним используется атрибут "name"
					для каждой группы чекбоксов указывается своё имя, по которому, в дальнейшем, возможно отделить группы чекбоксов при обработке на сервере.

						Пример: <form>
								  <label>
								    <input type="checkbox" name="languages" value="HTML">
								    Хочу изучать HTML
								  </label>
								  <br>
								  <label>
								    <input type="checkbox" name="languages" value="CSS">
								    Хочу изучать CSS
								  </label>
								  <br>
								  <label>
								    <input type="checkbox" name="languages" value="JS">
								    Хочу изучать JS
								  </label>
								</form>

			Радиокнопка:
				даёт строго один выбор.	
				Для создания радиокнопки, так же, как и чекбокса, используются два тега:

					<input> с указанием type="radio". Обязательным атрибутом является name, значением которого является имя. Данное имя должно быть одинаковым у всей группы радиокнопок.
					Без этого атрибута будет возможно выбрать все значения сразу, так как браузер не будет видеть связи между ними
					<label>, в котором будет текст, связанный с нужной нам радиокнопкой

				Для создания радиокнопки, так же, как и чекбокса, используются два тега:

					<input> с указанием type="radio". Обязательным атрибутом является name, значением которого является имя. Данное имя должно быть одинаковым у всей группы радиокнопок.
					Без этого атрибута будет возможно выбрать все значения сразу, так как браузер не будет видеть связи между ними
					<label>, в котором будет текст, связанный с нужной нам радиокнопкой
					Связь <input> с <label> происходит уже по одному из двух знакомых нам сценариев:

						Связь по id. Для этого необходимо задать уникальный id для <input>, и связать <label> с радиокнопкой с помощью атрибута for
						
						  <form>
						    <input id="yes" type="radio" name="question">
						    <label for="yes">Да</label>

						    <input id="no" type="radio" name="question">
						    <label for="no">Нет</label>
						  </form>

						Вложить <input> внутрь тега <label>. При этом указание уникального id не требуется
						
						  <form>
						    <label>
						      <input type="radio" name="question">
						      Да
						    </label>
						    <br>
						    <label>
						      <input type="radio" name="question">
						      Нет
						    </label>
						  </form>

					Для того чтобы после отправки формы на сервер возможно было узнать, какой именно пункт был выбран, используется атрибут value,
					внутри которого находится значение, позволяющее определить радиокнопку.

						<form>
						  <label>
						    <input type="radio" name="question" value="yes">
						    Да
						  </label>
						  <br>
						  <label>
						    <input type="radio" name="question" value="no">
						    Нет
						  </label>
						</form>

			TextArea:
				тег <textarea> позволяет пользователю набирать не одну строчку текста, а сразу несколько.

					Пример: <form>
								<textarea></textarea>
							</form>

				этот тег является парным.

				размер (высота, ширина) по умолчанию зависят от настроек браузера, но атрибуты "rows"/"cols" позволяют изменить его размер (строки/столбцы)

				Пример: <form>
						  <textarea rows="5" cols="30">textarea с 5 строками и 30 столбцами</textarea>
						</form>

			Списки:
				тег <option> позволяет настроить список.
				этот тег вкладывается в другой тег - <select> 

					Пример: <form>
							  <select>
							    <option disabled>Какой курс вы хотите пройти?</option>
							    <option>JS</option>
							    <option>PHP</option>
							    <option>Java</option>
							    <option>Racket</option>
							    <option>HTML</option>
							    <option>CSS</option>
							  </select>
							</form>

			Список внутри формы также может быть представлен в виде списка, в котором можно выбрать несколько элементов.
			Делается это с помощью зажатия кнопки ctrl и клика мышки по полям, которые мы хотим выбрать.

			Для того, чтобы создать список с множественным выбором, у тега <select> добавляется атрибут multiple:

				<form>
				  <select multiple>
				    <option>JS</option>
				    <option>PHP</option>
				    <option>Java</option>
				    <option>Racket</option>
				    <option>HTML</option>
				    <option>CSS</option>
				  </select>
				</form>

Отправка формы:
	последний шаг в создании формы - добавление кнопки для отправки результата на сервер-сайд сторону.
	для этого используется парный тег <button>: 
	
		<form>
		  <button>Отправить</button>
		</form>

	после нажатия кнопки данные будут обрабатываться обработчиком, который указан в атрибуте "action" (если такового нет, то данные отправятся на эту же страницу)

	Пример формы поиска:

		<h2>Форма поиска</h2>
		<form>
		  <label>
		    Введите ваш запрос
		    <input type="search">
		  </label>
		  <br>
		  <select>
		    <option disabled>В каком разделе искать?</option>
		    <option>JS</option>
		    <option>HTML</option>
		    <option>CSS</option>
		  </select>
		  <button>Искать</button>
		</form>

		Если нажать на кнопку «Искать», то страница перезагрузится и данные должны будут уйти в обработчик на эту же страницу.
		Так как обработчика нет, то никаких видимых результатов, кроме перезагрузки страницы, не произойдёт.

Семантические элементы (<div>):
	разработчики используют теги <div> и <span>
	Они позволяют создать блочный или строчный элемент, что помогает создавать независимые блоки с разным оформлением
		Основными семантическими тегами стали:

			<article>
			<aside>
			<footer>
			<header>
			<main>
			<nav>
			<section>

		Большинство элементов интуитивно понятны и их можно сразу использовать в своих документах.
		Теперь пример выше можно переделать с использованием новых элементов HTML:

			<header>
			  // Здесь будет шапка сайта. Обычно в ней располагается логотип, контактная информация, меню
			</header>

			<main>
			  // Уникальный контент сайта
			</main>

			<footer>
			  // Подвал сайта. Обычно здесь находится контактная информация, дополнительное меню, юридическая информация о компании
			</footer>

Шапка сайта:
	Шапкой на сайте принято называть верхнюю область, в которой находятся контактные данные, меню, логотип.
	В HTML5 для разметки шапки сайта используется парный тег <header>, внутри которого располагаются элементы.

	<header>
	  <img src="/logo.png" alt="Логотип"> <!-- Логотип сайта -->
	  <div id="menu"> <!-- Меню -->
	    <ul>
	      <li><a href="/">Главная</a></li>
	      <li><a href="/about">О нас</a></li>
	      <li><a href="/contacts">Контакты</a></li>
	    </ul>
	  </div>
	</header>

	Полезное - элемент header не является уникальным для страницы. Он может использоваться не только как шапка всей страницы, но и как шапка секции

Меню сайта:
	Для создания полноценного меню используется парный тег <nav>, задача которого — разметить область страницы с основным меню.

		<header>
		  <img src="/logo.png" alt="Логотип"> <!-- Логотип сайта -->
		  <nav> <!-- Меню -->
		    <ul>
		      <li><a href="/">Главная</a></li>
		      <li><a href="/about">О нас</a></li>
		      <li><a href="/contacts">Контакты</a></li>
		    </ul>
		  </nav>
		</header>

	Элемент nav, как и header не является уникальным для страницы. Его можно использовать для любого меню на странице, но есть несколько рекомендаций:

		Нет необходимости оборачивать каждое меню в элемент nav. В основном такой областью указываются только основные меню. Дополнительные, такие как меню в футере, не оборачивают в тег <nav>, хотя это не запрещено
		Хорошим примером дополнительного использования nav — навигация по текущей странице
		nav может содержать не только ссылки, но так же и текст, в котором есть ссылки. Ориентируйтесь на здравый смысл. Если навигация является основной для страницы или всего сайта, то оберните её в тег <nav>

Уникальный контент страницы:
	Такая область размечается с помощью парного тега <main>.

	Элемент main является уникальным для одной страницы. Это отражает его семантическое назначение — разметка уникального контента. При оборачивании контента в main важно не включать в него неуникальные области:

		Боковое меню
		Общую навигацию для сайта
		Общую шапку и футер сайта
		Логотип

	Размещайте в main именно текстовый/графический контент. Найти такой контент в шаблонах легко — он не дублируется на других страницах.
	Внутри элемента main могут находиться свои области навигации, шапки, секции и другие элементы, которые будут изучены в этом модуле.

Секция:
	На больших страницах содержится много контента, который помещён друг в друга.
	тег <section> - отдельная область с правилами использования, внутри main секции с формой, дополнительной информацией и так далее
	Может звучать немного запутано, но представьте себе страницу музыкального портала, у которого есть области:

		Информация об исполнителе
		Популярные треки исполнителя
		Дискография
		Список ближайших концертов

	Если это страница об исполнителе, то весь этот контент будет расположен внутри секции main, при этом стоит выделить и эти 4 секции.
	Они связаны с общим контентом, но являются самостоятельными единицами внутри него.

			Пример: 

				<main>
				  <h1>Blue October</h1>
				  <p>Американская группа из Хьюстона, играющая в стиле альтернативный рок</p>
				  <section>
				    <h2>Популярные треки</h2>
				  </section>
				  <section>
				    <h2>Дискография</h2>
				  </section>
				  <section>
				    <h2>Ближайшие концерты</h2>
				  </section>
				</main>

	Добавим в учебный пример форму заказа услуги. Эта форма для заказа именно той услуги, которая представлена на странице, поэтому секция находится внутри области main и вынесена в отдельный тег <section>.

			<header>
			  <img src="/logo.png" alt="Логотип"> <!-- Логотип сайта -->
			  <nav> <!-- Меню -->
			    <ul>
			      <li><a href="/">Главная</a></li>
			      <li><a href="/about">О нас</a></li>
			      <li><a href="/contacts">Контакты</a></li>
			    </ul>
			  </nav>
			</header>

			<main>
			  <p>Основной контент страницы. Это может быть статья, описание услуги, данные на странице контакты</p>

			  <section class="callback-form">
			    <h2>Оставить заявку</h2>
			    <form>
			      <!-- Здесь форма заказа услуги -->
			    </form>
			  </section>
			</main>
	
Самостоятельная секция:
	Помимо тега <section>, для обозначения секции используется тег <article>. Он предназначается для разметки секции, которая может быть использована самостоятельно и не привязана структурно к конкретной странице.
	В связи с тем, что <article> может быть использован самостоятельно, он обязательно внутри себя содержит заголовок.

	<article class="article-block">

	Пример использования:
		<article class="article-block">
    	  <h3>Услуга 3</h3>
    	  <p>Описание новой услуги</p>
    	  <a href="#">Ссылка на услугу</a>
    	</article>

	 сами <article> обёрнуты в <section>, так как эта секция напрямую связана с текущей страницей и показывает похожие услуги.

Боковая панель:
	Большинство сайтов имеют боковую панель или, как её ещё называют, сайдбар. Он служит для отображения информации, которая дополняет основной текст, но не является обязательной.
	Чаще всего это меню раздела, список определений из статьи, виджеты и т.д.

	существует тег <aside>, внутри которого и располагается боковая панель.

		<aside> <!-- Боковая панель (сайдбар) -->
		  <nav> <!-- Дополнительное меню страницы -->
		    <ul>
		      <li><a href="/service-1/">Услуга 1</a></li>
		      <li><a href="/service-2/">Услуга 2</a></li>
		      <li><a href="/service-3/">Услуга 3</a></li>
		    </ul>
		  </nav>
		</aside>

	<aside> содержится вне тега <main>. Этот контент не обязан быть уникальным на каждой странице.
	Он может быть уникальным для каждого конкретного раздела (если речь идёт, например, о меню).
	Если боковая панель уникальна для каждой страницы, то она должна быть расположена внутри тега <main>.

Сематический WEB:
	Существуют две реализации семантического веба:

		На основе микроразметки. Это специальные атрибуты, которые добавляются в HTML-разметку и помогают роботам найти нужную информацию.
		Микроразметка используется чаще всего, так как имеет множество возможностей и полей для разметки

		Используя стандарт HTML5. В стандарте появилось множество тегов, которые помогают роботам анализировать информацию, находить логические связи между блоками (или понимать, что их нет),
		искать необходимые части для корректного отображения на устройствах для чтения

		Пример семантической разметки на HTML5:

			<main> <!-- Определение основной части страницы -->
			  <article> <!-- Определение статьи -->
			    <header> <!-- Заголовочная информация статьи -->
			      <h1>Название статьи</h1>
			      <img src="article.png" alt="Заголовок статьи">
			    </header>

			    <p>Текст нашей статьи</p>

			    <footer> <!-- «Подвал статьи» с указанием автора и даты -->
			      <address> <!-- Информация об авторе статьи -->
			        <p>Автор: Дмитрий</p>
			        <p>Email: dmitry@test.test</p>
			      </address>
			      <time datetime="2019-07-27">27 июля</time> <!-- Дата написания статьи -->
			    </footer>
			  </article>
			</main>

Микроразметка:
	Правильная разметка страницы с помощью микроразметки помогает выводить в результатах поискового запроса не только ссылку на сайт и описание, но и дополнительную информацию:

		Название организации
		Время работы
		Адрес
		Номер телефона

	Микроразметка — инструмент, который реализуется с помощью дополнительных атрибутов HTML-тегов.

	Schema.org:
		 Имеет широкий выбор «словарей» для описания информации на странице.

	Словарь — это набор правил, по которым описываются блоки на странице.
		Пример: Сеансы фильмов в кинотеатре, информация отдела продаж, цены на товары, отзывы о статье

	Для примера возьмём контактные данные вымышленной компании «Прауд»

	<section>
	  <h1>Компания «Прауд»</h1>
	  <p>Адрес: г.Мотино, улица Строителей, дом 6</p>
	  <p>Телефон: 8 (8765) 333-00-00</p>
	  <p>Email: info@proud-company.test</p>
	</section>

	Возьмём словарь Organization. Полное описание этого словаря можно найти на сайте https://schema.org/.

	Для того чтобы подсказать поисковой системе, что данные размечены словарём, указывается два атрибута:

		itemscope — указатель на то, что блок — единая сущность, и данные в нем связаны. Указывается только у главного блока и не имеет своего значения
		itemtype — указывает на то, какой словарь будет использоваться. Например, для описания контактов выбран словарь Organization. Полный вид атрибута: itemtype="http://schema.org/Organization"

	Schema.org позволяет отдельно указывать улицу, дом, строение и так далее, но мы обобщим это и используем только одно значение itemprop="address",
	чтобы обозначить адрес предприятия. Обратите внимание, что элементы разметки указываются с помощью атрибута itemprop.

	<section itemscope itemtype="http://schema.org/Organization">
	  <h1>Компания «Прауд»</h1>
	  <p>Адрес: <span itemprop="address">г.Мотино, улица Строителей, дом 6</span></p>
	  <p>Телефон: 8 (8765) 333-00-00</p>
	  <p>Email: info@proud-company.test</p>
	</section>

	 размечаются только данные, оставляя за «бортом» название поля. Для этого нужные данные оборачивают в <span> и для него указывают атрибут.

	<section itemscope itemtype="http://schema.org/Organization">
	  <h1 itemprop="name">Компания «Прауд»</h1>
	  <p>Адрес: <span itemprop="address">г.Мотино, улица Строителей, дом 6</span></p>
	  <p>Телефон: <span itemprop="telephone">8 (8765) 333-00-00</span></p>
	  <p>Email: <span itemprop="email">info@proud-company.test</span></p>
	</section>

Ошибки в HTML-разметке:
	они бывают у каждого, главное просто следить за написанием
	они не всегда критичны
